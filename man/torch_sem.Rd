% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/torch_sem.R
\name{torch_sem}
\alias{torch_sem}
\title{Structural equation model with a Torch backend}
\usage{
torch_sem(syntax, dtype = torch_float32(), device = torch_device("cpu"))
}
\arguments{
\item{syntax}{lavaan syntax for the SEM model}

\item{dtype}{(optional) torch dtype for the model (default torch_float32())}

\item{loss}{freshly computed loss function (needed by torch for backwards pass). Ignored if se = FALSE}

\item{se}{whether standard errors should be returned}

\item{dat}{dataset (centered!) as a \code{torch_tensor}}

\item{lrate}{learning rate of the Adam optimizer.}

\item{maxit}{maximum number of epochs to train the model}

\item{verbose}{whether to print progress to the console}

\item{tol}{parameter change tolerance for stopping training}
}
\value{
A \code{torch_sem} object, which is an \code{nn_module} (torch object)

\code{torch_tensor} model-implied covariance matrix

\code{torch_tensor} ACOV of the free parameters

\code{vector} standard errors of the free parameters




}
\description{
Compute the model-implied covariance matrix.

In the forward pass, we apply constraints to the parameter vector, and we
create matrix views from it to compute the model-implied covariance matrix.
Also accessible by calling the object itself as a function, e.g., \code{my_torch_sem()}.

Compute and return the asymptotic covariance matrix of the parameters with
respect to the loss function, to compute standard errors (sqrt(diag(ACOV)))

Compute and return observed information standard errors of the parameters, assuming
the loss function is the likelihood and the current estimates are ML estimates.

Create a lavaan-like parameter table from the current parameter estimates in the
torch_sem object.

Fit a torch_sem model using the default maximum likelihood objective.

This function uses the Adam optimizer to estimate the parameters of a torch_sem
}
\details{
Function for creating a structural equation model

This function instantiates a torch object for computing the model-implied covariance matrix
based on a structural equation model. Through \code{torch}, gradients of this forward model can then
be computed using backpropagation, and the parameters can be optimized using gradient-based
optimization routines from the \code{torch} package.

Because of this, it is easy to add additional penalties to the standard objective function,
or to write a new objective function altogether.
}
\seealso{
torch::optim_adam
}
