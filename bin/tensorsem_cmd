#!/usr/bin/env python
# Basic CMD file for estimating tensorsem models
import argparse
import torch
import pandas as pd
import tensorsem as ts
import matplotlib.pyplot as plt
from pathlib import Path

parser = argparse.ArgumentParser(description = "Estimate a basic SEM model using PyTorch.")
parser.add_argument("-m", "--model", dest = "MODPATH", type = str, help = "model file location (.pkl)", required = True)
parser.add_argument("-d", "--data",  dest = "DATPATH", type = str, help = "data file location (.csv)",  required = True)
parser.add_argument("-o", "--out",   dest = "OUTFOLDER", type = str, help = "output folder", default = ".")
parser.add_argument("--se", dest = "SE", action = "store_true", default = False,
                    help = "Whether to output standard errors")

# optim parameters
parser.add_argument("-l", "--lrate", dest = "LRATE", type = float, default = 0.07,
                    help = "Learning rate for the Adam optimizer")
parser.add_argument("-i", "--maxit", dest = "MAXIT", type = int, default = 5000,
                    help = "Maximum number of iterations")
parser.add_argument("-t", "--tol", dest = "TOL", type = float, default = 1e-10,
                    help = "Convergence tolerance for log-likelihood change")

ARGS = parser.parse_args()

print("Loading data\n")
opt = ts.SemOptions.from_file(ARGS.MODPATH)
df = pd.read_csv(ARGS.DATPATH)[opt.ov_names]  # order the columns, important step!
df -= df.mean(0)  # center the data
dat = torch.tensor(df.values, dtype = torch.float32, requires_grad = False)

print("Creating model\n")
mod = ts.StructuralEquationModel(opt)
optim = torch.optim.Adam(mod.parameters(), lr = ARGS.LRATE)
ll = []

print("Optimizing...\n")
for epoch in range(ARGS.MAXIT):
    optim.zero_grad()
    loss = ts.mvn_negloglik(dat, mod())
    loss.backward()
    ll.append(-loss.item())
    optim.step()
    if epoch > 1:
        if abs(ll[-1] - ll[-2]) < ARGS.TOL:
            break

WORK_DIR = Path(ARGS.OUTFOLDER)
print("Storing loss image > " + str(WORK_DIR / "optim.png") + "\n")
plt.plot(ll)
plt.ylabel("Log-likelihood")
plt.xlabel("Epoch")
plt.title("Adam - optimized SEM model\nLearning rate = " + str(ARGS.LRATE))
plt.savefig(WORK_DIR / "optim.png")
plt.close()

print("Writing parameter estimates to file > " + str(WORK_DIR / "params.csv") + "\n")
if ARGS.SE:
    est = mod.free_params
    se = mod.Inverse_Hessian(ts.mvn_negloglik(dat, mod())).diag().sqrt()
    pd.DataFrame({"est": est.detach(), "se": se.detach()}).to_csv(WORK_DIR / "params.csv")
else:
    pd.DataFrame({"est": mod.free_params.detach()}).to_csv(WORK_DIR / "params.csv")

print("Done! Exiting with code 0\n")
exit(0)